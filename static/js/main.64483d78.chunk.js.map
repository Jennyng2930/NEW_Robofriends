{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","App","onChangeSearch","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0OAgBeA,EAdF,SAAC,GAA2B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,MACvB,OACI,yBAAKC,UAAU,uDACP,6BACI,yBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,gBACrB,6BACI,gCAAMD,EAAN,KACA,+BAAKE,OCmBdI,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAKf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CACIC,IAAOD,EACPT,GAAMM,EAAOG,GAAGT,GAChBD,KAASO,EAAOG,GAAGV,KACnBE,MAAUK,EAAOG,GAAGR,aCAjCU,EAjBG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKV,UAAU,UACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCCbI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAU,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCiBJC,E,kDAnBX,WAAaN,GAAO,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAOAR,EAAOS,GACtBC,KAAKC,SAAS,CAACH,UAAU,M,+BAIzB,OAAIE,KAAKH,MAAMC,SACJ,0DAEJE,KAAKV,MAAMK,a,GAhBCO,aCoDZC,G,wDA3CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKX,MAAQ,CAETlB,OAAQ,GACR2B,YAAa,IALP,E,gEAQO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BAQrC,MAE2Bb,KAAKH,MAA7BlB,EAFH,EAEGA,OAAQ2B,EAFX,EAEWA,YAEVQ,EAAgBnC,EAAOoC,QAAO,SAAAC,GAChC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAsB,IAAlBtC,EAAOwC,OACA,wBAAI5C,UAAU,aAAd,gBAGH,6BACI,wBAAIA,UAAU,aAAd,iBACA,kBAAC,EAAD,CAAWU,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,OAAQmC,W,GApC5BZ,cCEEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.64483d78.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ( { name, id, email } ) => {\n    return (\n        <div className=\"tc bg-light-green br3 pa3 ma2 grow dib bw2 shadow-5\">\n                <div> \n                    <img alt='robots' src={`https://robohash.org/${id}/?set=set4`}/>\n                    <div>\n                        <h2> {name} </h2>\n                        <p> {email}</p>\n                    </div>\n                </div>\n        </div>\n    )\n}\n\nexport default Card; \n","import React from 'react';\nimport Card from './Card';\n// import {robots} from './robots'; /* if dont import robots here, can input robots \n/* as parameter of CardList */\n\nconst CardList = ({robots}) => {\n    // to test ErrorBoundry, do this to test:\n    /* if (true) {\n        throw new Error('Noooo, that is a mistake');\n    } */\n    return (\n        <div>\n           {\n                robots.map((user,i) => {\n                    return (\n                        <Card \n                            key = {i} \n                            id = {robots[i].id} \n                            name = { robots[i].name } \n                            email = { robots[i].email }\n                        />\n                    )\n                })\n            } \n        </div>\n    );\n}\n\nexport default CardList; \n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className=\"pa2 tc\"> \n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\" \n                placeholder=\"search robots\" \n                onChange = {searchChange}\n                /* every time the onChange event happen, it call the seachChange\n                function */\n            />\n        </div>\n    )\n}\n\n\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style = { {overflowY:'scroll', border:'3px solid black', height: '800px'} }>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor (props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch (props, info) {\n        this.setState({hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1> Ooops...That is not good </h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry; ","import React,{ Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n// import { robots } from './robots'; \nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n\n// in order to use State,we have to go back to our original way of React Component\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            // declare the state:\n            robots: [],\n            searchfield: \"\",\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response=> response.json())\n            .then(users => this.setState({robots: users}))\n    }\n\n    onChangeSearch = (event) => {\n        this.setState({searchfield: event.target.value})  /* update the search\n        field */\n    }\n\n    render() {\n        //destructuring, so we dun have to use this.state.robots... \n        const { robots, searchfield } = this.state; \n\n        const filteredRobots= robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        if (robots.length === 0) {\n            return <h1 className=\"f1 dim tc\"> Loading... </h1>\n        } else {\n            return (\n                <div> \n                    <h1 className=\"f1 tc dim\"> RoboFriends </h1>\n                    <SearchBox searchChange={this.onChangeSearch}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n        }   \n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; /* we can actually add ReactNative that render on mobile phones */\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n \n// Card has Robots\n// CardList has Cards\n// App has CardList\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}